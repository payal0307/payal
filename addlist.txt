using olxadmin.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;

namespace olxadmin.Controllers
{
    public class HomeController : Controller
    {
        public ActionResult Index()
        {
            return View();
        }

        public ActionResult About()
        {
            ViewBag.Message = "Your application description page.";

            return View();
        }

        public ActionResult Contact()
        {
            ViewBag.Message = "Your contact page.";

            return View();
        }
        public ActionResult InsertProductDetail(AddlistModel model) // Assuming AddlistModel is your model for form input
        {
            try
            {
                RepoModel repo = new RepoModel();

                // Call the InsertProductDetail method in your repository to insert the product
                bool insertionResult = repo.InsertProductDetail(model);

                if (insertionResult)
                {
                    // The insertion was successful, redirect to the index or a success page
                    ViewBag.SuccessMessage = "Data has been inserted successfully.";

                    return RedirectToAction(nameof(Index));
                }
                else
                {
                    // The insertion failed, you might want to handle this case or display an error message
                    return View(); // You might want to return an error view or display a message here
                }
            }
            catch (Exception ex)
            {
                // Log or handle the exception
                Console.WriteLine("Error inserting product detail: " + ex.Message);
                return View(); // Handle the exception gracefully, you might want to display an error view or message
            }
        }
    }
    }
-----------------------------------------repo----
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Web;

namespace olxadmin.Models
{
    public class RepoModel
    {
        public bool InsertProductDetail(AddlistModel model)
        {
            try
            {
                using (SqlConnection connection = new SqlConnection(ConfigurationManager.ConnectionStrings["connection"].ToString()))
                {
                    connection.Open();

                    using (SqlCommand cmd = new SqlCommand("InsertProductDetail", connection))
                    {
                        cmd.CommandType = CommandType.StoredProcedure;

                        // Make sure the parameter names match the stored procedure
                        cmd.Parameters.AddWithValue("@ProductTitle", model.ProductTitle);
                        cmd.Parameters.AddWithValue("@ProductDescription", model.ProductDescription);
                        cmd.Parameters.AddWithValue("@ProductPrice", model.ProductPrice);
                        cmd.Parameters.AddWithValue("@ProductStatus", model.ProductStatus);
                        cmd.Parameters.AddWithValue("@ProductImageId", model.IFormFile);
                        cmd.Parameters.AddWithValue("@CityId", model.CityId);
                        cmd.Parameters.AddWithValue("@UserId", model.UserId);

                        int affectedRows = cmd.ExecuteNonQuery();

                        // Check if the insert operation was successful
                        return affectedRows > 0;
                    }
                }
            }
            catch (Exception ex)
            {
                // Log or handle the exception
                Console.WriteLine("Error inserting product detail: " + ex.Message);
                return false; // Return false to indicate failure
            }
        }
    }
}



-------------------model---------
using System;

namespace olxadmin.Models
{
    public class AddlistModel
    {
        public int ProductDetailsId { get; set; }

        public string ProductTitle { get; set; }

        public string ProductDescription { get; set; }

        public float ProductPrice { get; set; }

        public string IFormFile { get; set; }

        public int CityId { get; set; }

        public bool ProductStatus { get; set; }

        public int UserId { get; set; }

        public DateTime CreatedOn { get; set; }

        public DateTime UpdatedOn { get; set; }
    }
}
-------------------html------------------
@model  List<olxadmin.Models.AddlistModel>

<!-- Main Content Area -->
@if (ViewBag.SuccessMessage != null)
{
    <div class="alert alert-success">@ViewBag.SuccessMessage</div>
}
<main>
    <h1>Manage Ads</h1>

    <!-- List of Ads -->
    <table>
        <thead>
            <tr>
                <th>ID</th>
                <th>Image</th>
                <th>Title</th>
                <th>Description</th>
                <th>Price</th>
                <th>Status</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var ad in Model)
            {
                <tr>
                    <td>@ad.ProductDetailsId</td>
                    <td><img src="@Url.Content("~/Images/" + ad.IFormFile + ".jpg")" alt="Ad Image" width="100"></td>
                    <td>@ad.ProductTitle</td>
                    <td>@ad.ProductDescription</td>
                    <td>@ad.ProductPrice</td>
                    <td>@(ad.ProductStatus ? "Active" : "Inactive")</td>
                    @*<td>
                            <a href="@Url.Action("EditAd", new { id = ad.ProductDetailsId })">Edit</a>
                            <a href="@Url.Action("ApproveAd", new { id = ad.ProductDetailsId })">Approve</a>
                            <a href="@Url.Action("RejectAd", new { id = ad.ProductDetailsId })">Reject</a>
                        </td>*@
                </tr>
            }
        </tbody>
    </table>

    <!-- Add New Ad Button -->
    <div class="add-ad-button">
        <a href="#">Add New Ad</a>
    </div>
</main>----_-++++++++++@model IEnumerable<OLXProject.Models.MyAdvertiseModel>

@{
    ViewBag.Title = "Index";
}

<h2>Index</h2>

<p>
    <a href="@Url.Action("Create")">Create New</a>
</p>

<table class="table">
    <tr>
        <th>Advertise ID</th>
        <th>Product Subcategory ID</th>
        <th>Advertise Title</th>
        <th>Advertise Description</th>
        <th>Advertise Price</th>
        <th>Area ID</th>
        <th>Advertise Status</th>
        <th>User ID</th>
        <th>Advertise Approved</th>
        <th>Created On</th>
        <th>Updated On</th>
        <th></th>
    </tr>

    @foreach (var item in Model)
    {
        <tr>
            <td>@Html.DisplayFor(modelItem => item.advertiseId)</td>
            <td>@Html.DisplayFor(modelItem => item.productSubCategoryId)</td>
            <td>@Html.DisplayFor(modelItem => item.advertiseTitle)</td>
            <td>@Html.DisplayFor(modelItem => item.advertiseDescription)</td>
            <td>@Html.DisplayFor(modelItem => item.advertisePrice)</td>
            <td>@Html.DisplayFor(modelItem => item.areaId)</td>
            <td>@Html.DisplayFor(modelItem => item.advertiseStatus)</td>
            <td>@Html.DisplayFor(modelItem => item.userId)</td>
            <td>@Html.DisplayFor(modelItem => item.advertiseapproved)</td>
            <td>@Html.DisplayFor(modelItem => item.createdOn)</td>
            <td>@Html.DisplayFor(modelItem => item.updatedOn)</td>
            <td>
                @Html.ActionLink("Edit", "Edit", new { id = item.advertiseId }) |
                @Html.ActionLink("Details", "Details", new { id = item.advertiseId }) |
                @Html.ActionLink("Delete", "Delete", new { id = item.advertiseId })
            </td>
        </tr>
    }
</table>

<style>
    table {
        width: 100%;
        border-collapse: collapse;
    }

    th, td {
        padding: 8px;
        text-align: left;
        border-bottom: 1px solid #ddd;
    }

    th {
        background-color: #f2f2f2;
    }

    tr:hover {
        background-color: #f5f5f5;
    }

    a {
        color: #007bff;
        text-decoration: none;
    }
</style>
30/09/2023-----------------------
@model IEnumerable<demo.Models.MyAdvertise>


<p>
    @Html.ActionLink("Create New", "Create")
</p>
<table class="table">
    <tr>
        <th>AdvertiseId</th>
        <th>CategoryName</th>
        <th>AdvertiseTitle</th>
        <th>AdvertiseDescription</th>
        <th>AdvertisePrice</th>
        <th>City</th>
        <th>AdvertiseStatus</th>
        <th>UserName</th>
        <th>Advertiseapproved</th>

    </tr>
   
    @foreach (var item in Model)
    {
        <tr>
            <td>@item.advertiseId</td>
            
            <td>@item.advertiseTitle</td>
            <td>@item.advertiseDescription</td>
            <td>@item.advertisePrice</td>
           
            <td>@item.advertiseStatus</td>
            
            <td>@item.advertiseapproved</td>
            <td>
                @Html.ActionLink("Approve", "Approve", new { id = item.advertiseId }, new { @class = "btn btn-success" })
                @Html.ActionLink("Reject", "Reject", new { id = item.advertiseId }, new { @class = "btn btn-danger" })
            </td>
        </tr>
    }
</table>

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;

namespace demo.Models
{
    public class MyAdvertise
    {
        public int advertiseId { get; set; }
        public List<ProductSubCategory> productsubcat { get; set; }
        public string advertiseTitle { get; set; }
        public string advertiseDescription { get; set; }
        public string advertisePrice { get; set; }
        public int areaId { get; set; }
        public string advertiseStatus { get; set; }
        public List<Users> users { get; set; }
        public string advertiseapproved { get; set; }
        

    }
    public class ProductSubCategory
    {
        public int productSubCategoryId { get; set; }
        public string productCategoryId { get; set; }
        public string productSubCategoryName { get; set; }

    }
    public class Users
    {
        public int userId { get; set; }

        //// [Required(ErrorMessage = "Please Enter FirstName")]
        public string firstName { get; set; }

        //// [Required(ErrorMessage = "Please Enter LastName")]
        public string lastName { get; set; }

        ////  [Required(ErrorMessage = "Email Id is required.")]
        //// [RegularExpression(@"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$", ErrorMessage = "Invalid email format.")]
        public string userEmail { get; set; }

        ////[Required(ErrorMessage = "Please Enter Password")]
        ////[DataType(DataType.Password)]
        //// [StringLength(100, ErrorMessage = "Password \"{0}\" must have {2} character", MinimumLength = 8)]
        //[RegularExpression(@"^([a-zA-Z0-9@*#]{8,15})$", ErrorMessage = "Password must contain: Minimum 8 characters atleast 1 " +
        //"UpperCase, LowerCase, Number, Special Character")]
        //"UpperCase, LowerCase, Number, Special Character")]
        public string Password { get; set; }

        //[DataType(DataType.PhoneNumber)]
        // [Display(Name = "MobileNo")]
        //[Required(ErrorMessage = "Phone Number Required!")]
        // [RegularExpression(@"^[\+]?[(]?[0-9]{3}[)]?[-\s\.]?[0-9]{3}[-\s\.]?[0-9]{4,6}$", ErrorMessage = "Entered phone format is not valid.")]
        public string MobileNo { get; set; }

        //Required(ErrorMessage = "Please Select the gender")]
        public string Gender { get; set; }

        //[Required(ErrorMessage = "The Address field is required")]
        public string Address { get; set; }

        // [Required(ErrorMessage = "Please select a city")]
        public string City { get; set; }
        //public string Role { get; set; } = "0";

        //[Required(ErrorMessage = "Please enter Security Answer")]
        //[Display(Name = "SecurityAnswer")]
        //public string SecurityAnswer { get; set; }

    }
}
        [HttpPost]
        public ActionResult addlist(MyAdvertise ads)
        {
            adslistRepo adsModel = new adslistRepo();
            adsModel.GetadsFromDatabase();
            adsModel.Getuser();
            return View(ads);
        }
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data.SqlClient;
using System.Linq;
using System.Web;

namespace demo.Models
{
    public class adslistRepo
    {
        public List<MyAdvertise> GetadsFromDatabase()
        {
            SqlConnection sqlConnection = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString());
            List<MyAdvertise> adsList = new List<MyAdvertise>();

            string query = "SELECT p.advertiseId, p.advertiseTitle, p.advertiseDescription, p.advertisePrice, a.advertiseStatus, u.firstName " +
                           "FROM tbl_MyAdvertise p " +
                           "INNER JOIN tbl_Users u ON p.userId = u.userId " +
                           "INNER JOIN tbl_Areas a ON p.areaId = a.areaId";

            SqlCommand command = new SqlCommand(query, sqlConnection);
            sqlConnection.Open();
            SqlDataReader reader = command.ExecuteReader();

            while (reader.Read())
            {
                MyAdvertise product = new MyAdvertise()
                {
                    advertiseId = Convert.ToInt32(reader["advertiseId"]),
                    advertiseTitle = Convert.ToString(reader["advertiseTitle"]),
                    advertiseDescription = Convert.ToString(reader["advertiseDescription"]),
                    advertisePrice = Convert.ToString(reader["advertisePrice"]),
                    advertiseStatus = Convert.ToString(reader["advertiseStatus"]),
                    
                };

                adsList.Add(product);
            }

            sqlConnection.Close();
            return adsList;
        }
        public List<Users> Getuser()
        {
            SqlConnection sqlConnection = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString());
            List<Users> adsList = new List<Users>();

            string query = "SELECT p.advertiseId, p.advertiseTitle, p.advertiseDescription, p.advertisePrice, a.advertiseStatus, u.firstName " +
                           "FROM tbl_MyAdvertise p " +
                           "INNER JOIN tbl_Users u ON p.userId = u.userId " +
                           "INNER JOIN tbl_Areas a ON p.areaId = a.areaId";

            SqlCommand command = new SqlCommand(query, sqlConnection);
            sqlConnection.Open();
            SqlDataReader reader = command.ExecuteReader();

            while (reader.Read())
            {
                Users product = new Users()
                {
                    firstName = Convert.ToString(reader["firstName"])
                };

                adsList.Add(product);
            }

            sqlConnection.Close();
            return adsList;
        }


    }
}

    


